// @ts-nocheck
declare interface Player {
    __tostring(): void;
    alloc(id: number): Player;
    get_by_id(id: number): Player;
    get_by_handle(py_player: py.Role): Player;
    get_camp(): void;
    get_save_data_bool_value(index: ): boolean;
    is_middle_join(): boolean;
    is_enemy(player: Player): boolean;
    set_name(name: string): void;
    set_team(id: py.Camp): void;
    set(key: py.RoleResKey, value: number): void;
    add(key: py.RoleResKey, value: number): void;
    set_exp_rate(rate: number): void;
    set_hostility(player: Player, is_hostile: boolean): void;
    set_strict_group_navigation(is_strict: boolean): void;
    select_unit(unit_or_group: Unit | UnitGroup): void;
    set_follow_distance(distance: number): void;
    set_mouse_click_selection(is_enable: boolean): void;
    set_mouse_drag_selection(is_enable: boolean): void;
    set_mouse_wheel(is_enable: boolean): void;
    is_operation_key_occupied(key: py.NormalKey, assist_key: py.RecordKey): boolean;
    set_operation_key(operation: py.EditableGameFunc, key: py.NormalKey, assist_key: py.RecordKey): void;
    set_all_operation_key(operation: py.AllGameFunc, is_enable: boolean): void;
    get_operation_key(key: py.NormalKey, assist_key: py.RecordKey): py.EditableGameFunc;
    set_tech_level(tech_type: py.TechKey, level: number): void;
    add_tech_level(tech_type: py.TechKey, level: number): void;
    share_vision_with_player(target_player: Player, share: boolean): void;
    share_vision_of_unit(unit: Unit, share: boolean): void;
    upload_save_data(): void;
    add_global_save_data(key: string, value: number): void;
    use_store_item(count: number, item_id: py.StoreKey): void;
    is_visible(point: Point): boolean;
    is_in_fog(point: Point): boolean;
    is_in_shadow(point: Point): boolean;
    get_attr(key: py.RoleResKey): number;
    get_id(): number;
    get_state(): y3.Const.RoleStatus;
    get_controller(): y3.Const.RoleType;
    get_name(): string;
    get_exp_rate(): number;
    get_team_id(): number;
    get_save_data_table(key: number): object;
    get_save_data_string(key: number): string;
    get_save_data_float(key: number): number;
    get_save_data_int(key: number): number;
    get_rank_num(key: number): number;
    get_tech_level(tech_id: py.TechKey): number;
    get_platform_icon(): number;
    get_store_item_number(id: py.StoreKey): number;
    get_platform_level(): number;
    is_in_group(player_group: PlayerGroup): boolean;
    get_all_units(): UnitGroup;
    create_unit(unit_id: py.UnitKey, point: Point, direction: number): Unit;
    kick(reason: string): void;
    get_platform_model(): py.ModelKey;
    get_mouse_pos(): Point;
    get_mouse_ui_x_percent(): number;
    get_mouse_ui_y_percent(): number;
    get_mouse_pos_x(): number;
    get_mouse_pos_y(): number;
    is_key_pressed(key: y3.Const.KeyboardKey): boolean;
    get_platform_name(): string;
    display_info(msg: string, localize: any): void;
    get_res_icon(key: py.RoleResKey): number;
    get_res_name(key: py.RoleResKey): string;
    set_color_grading(value: number): void;
    set_local_terrain_visible(is_visible: boolean): void;
    enable_vignetting(player: Player, is_enable: boolean): void;
    set_vignetting_size(size: number): void;
    set_role_vignetting_breath_rate(circle_time: number): void;
    set_vignetting_change_range(range: number): void;
    set_vignetting_color(red: number, green: number, blue: number, time: number): void;
}
