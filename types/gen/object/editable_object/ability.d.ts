// @ts-nocheck
declare interface Ability {
    destructor(): void;
    get_by_handle(py_ability: py.Ability): Ability;
    is_cd_reduce(): boolean;
    is_cost_hp_can_die(): boolean;
    can_cast_when_hp_insufficient(): boolean;
    has_tag(tag: string): boolean;
    enable(): void;
    disable(): void;
    restart_cd(): void;
    complete_cd(): void;
    remove(): void;
    set_level(level: number): void;
    add_cd(value: number): void;
    set_stack(value: number): void;
    get_name(): void;
    set_float_attr(key: string, value: number): void;
    set_int_attr(key: string, value: number): void;
    set_cd(value: number): void;
    add_level(value: number): void;
    add_stack(value: number): void;
    add_remaining_cd(value: number): void;
    add_float_attr(key: string, value: number): void;
    add_int_attr(key: string, value: number): void;
    set_name(name: string): void;
    set_description(des: string): void;
    learn(): void;
    set_charge_time(value: number): void;
    set_range(value: number): void;
    get_range(): number;
    set_player_attr_cost(key: string, value: number): void;
    add_player_attr_cost(key: string, value: number): void;
    set_cd_reduce(is_influenced: boolean): void;
    set_is_cost_hp_can_die(can_die: boolean): void;
    set_can_cast_when_hp_insufficient(can_cast: boolean): void;
    set_sector_radius(value: number): void;
    set_sector_angle(value: number): void;
    set_arrow_length(value: number): void;
    set_arrow_width(value: number): void;
    set_circle_radius(value: number): void;
    set_pointer_type(type: y3.Const.AbilityPointerType): void;
    get_charge_time(): number;
    get_type(): y3.Const.AbilityType;
    get_ability_key(): py.AbilityKey;
    get_slot(): y3.Const.AbilityIndex;
    get_player_attr_cost(key: string): number;
    get_cast_type(): py.AbilityCastType;
    get_formula_kv(key: string): number;
    get_float_attr(key: string): number;
    get_int_attr(key: string): number;
    get_string_attr(key: py.AbilityStrAttr): string;
    get_owner(): Unit;
    get_cd(): number;
    is_destory(): boolean;
    get_target(cast: number): Unit | Destructible | Item | Point | undefined;
    show_indicator(player: Player): void;
    check_precondition_by_key(player: Player, ability_key: py.AbilityKey): boolean;
    is_cd_reduce_by_key(ability_key: py.AbilityKey): boolean;
    get_float_attr_by_key(ability_key: py.AbilityKey, key: string): number;
    get_int_attr_by_key(ability_key: py.AbilityKey, key: string): number;
    set_normal_attack_preview_state(player: Player, state: boolean): void;
    set_smart_cast_with_pointer(player: Player, state: boolean): void;
    hide_pointer(player: Player): void;
    get_icon_by_key(ability_key: py.AbilityKey): number;
    set_autocast(enable: boolean): void;
    get_formula_attr_by_key(ability_id: py.AbilityKey, attr_name: string, level: number, stack_count: number, unit_hp_max: number, unit_hp_cur: number): number;
    get_str_attr_by_key(ability_key: py.AbilityKey, key: py.AbilityStrAttr): string;
    set_icon(icon_id: number): void;
    set_build_rotate(angle: number): void;
    get_skill_pointer(): y3.Const.AbilityPointerType;
    get_skill_type_pointer(name: py.AbilityKey): y3.Const.AbilityPointerType;
    set_max_cd(value: number): void;
}
