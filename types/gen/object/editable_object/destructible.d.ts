// @ts-nocheck
declare interface Destructible {
    destructor(): void;
    get_by_handle(py_destructible: any): Destructible;
    get_by_id(id: py.DestructibleID): Destructible;
    is_exist(): boolean;
    get_id(): number;
    can_be_ability_target(): boolean;
    can_be_attacked(): boolean;
    can_be_selected(): boolean;
    can_be_collected(): boolean;
    is_visible(): boolean;
    is_alive(): boolean;
    kill(killer_unit: Unit): void;
    remove(): void;
    reborn(): void;
    set_point(point: Point): void;
    set_hp(value: number): void;
    add_hp(value: number): void;
    set_max_hp(value: number): void;
    add_max_hp(value: number): void;
    set_resource(value: number): void;
    add_resource(value: number): void;
    set_max_resource(value: number): void;
    add_max_resource(value: number): void;
    set_name(name: string): void;
    set_description(description: string): void;
    set_scale(x: number, y: number, z: number): void;
    set_facing(angle: number): void;
    set_height(height: number): void;
    add_height(height: number): void;
    set_can_be_ability_target(can_be_ability_target: boolean): void;
    set_can_be_attacked(is_attackable: boolean): void;
    set_can_be_selected(is_selectable: boolean): void;
    set_can_be_collected(is_collectable: boolean): void;
    add_tag(tag: string): void;
    remove_tag(tag: string): void;
    play_animation(anim_name: string, start_time: number, end_time: number, is_loop: boolean, speed: number): void;
    stop_animation(anim_name: string): void;
    replace_model(model_id: py.ModelKey): void;
    cancel_replace_model(model_id: py.ModelKey): void;
    set_visible(is_visible: boolean): void;
    get_key(): py.DestructibleKey;
    get_name(): string;
    get_description(): string;
    get_hp(): number;
    get_resource_name(): string;
    get_max_hp(): number;
    get_resource(): number;
    get_max_resource(): number;
    get_resource_type(): py.RoleResKey;
    get_item_type(): py.ItemKey;
    get_model(): py.ModelKey;
    get_height(): number;
    get_facing(): number;
    get_position(): Point;
    create_destructible(type_id: py.DestructibleKey, point: Point, angle: number, scale_x: any, scale_y: any, scale_z: any, height: any): Destructible;
    get_name_by_key(key: py.DestructibleKey): string;
    get_description_by_key(key: py.DestructibleKey): string;
    get_model_by_type(key: py.DestructibleKey): py.ModelKey;
    pick(area: Area): Destructible[];
    pick_in_shape(point: Point, shape: Shape): object;
}
